name: Continuous integration and delivery

on:
  push:
    branches: ["main", "develop"]
    paths:
        - 'src/**'
  pull_request:
    branches: ["main", "develop"]
  workflow_dispatch:
    inputs:
      publish_nuget:
        description: "Publish nuget package?"
        default: false
        required: false
        type: boolean

env:
  configuration: release
  packagePath: ${{ github.workspace }}/packed-nuget

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: src
    env:
      coverageReportPath: ${{ github.workspace }}/coverage-reports/
    outputs:
      package_version: ${{ steps.getversion.outputs.package_version }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 6.0.x
      - name: Restore dependencies
        run: dotnet restore
      - name: Build solution
        run: dotnet build --no-restore -c $configuration
      - name: Run unit tests
        run: dotnet test --no-build --verbosity normal --filter "FullyQualifiedName~UnitTests" -c $configuration -p:CollectCoverage=true -p:CoverletOutputFormat=\"json,opencover\" -p:CoverletOutput=${{ env.coverageReportPath }} -p:MergeWith=${{ env.coverageReportPath }}coverage.json -p:Exclude="[*]Dapper.SimpleSqlBuilder.UnitTestHelpers*"
      - name: Run integration tests
        run: dotnet test --no-build --filter "FullyQualifiedName~IntegrationTests" --verbosity normal -c $configuration
      - name: Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: ${{ env.coverageReportPath }}
      - name: Get version
        id: getversion
        run: |
          nugetVersion=${{ env.GitBuildVersionSimple }}
          
          if ${{ github.ref_name == 'develop' }};
          then
            nugetVersion+="-beta"
          fi
          
          echo "package_version=$nugetVersion" >> $GITHUB_OUTPUT
      - name: Create nuget packages
        if: ${{ inputs.publish_nuget == true }}
        run: dotnet pack --no-build -o $packagePath -c $configuration     
      - name: Upload artifacts
        if: ${{ inputs.publish_nuget == true }}
        uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: ${{ env.packagePath }}
          retention-days: 7
      
  publish:
    if: ${{ contains(fromJson('["main", "develop"]'), github.ref_name) && inputs.publish_nuget == true }}
    name: Publish
    needs: [build]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: src

    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: artifacts
          path: ${{ env.packagePath }}
      - name: Push packages
        run: dotnet nuget push  ${{ env.packagePath }}/*.nupkg --api-key ${{ secrets.NUGET_KEY }} --source https://api.nuget.org/v3/index.json
      - name: Create Release Documentation
        if: ${{ success() }}
        run: |
          if ${{ github.ref_name == 'main' }};
          then
            gh release create 'v${{ needs.build.outputs.package_version }}' --title 'Release ${{ needs.build.outputs.package_version }}' --generate-notes
          else
            gh release create 'v${{ needs.build.outputs.package_version }}' --target ${{ github.ref_name }} --title 'Release ${{ needs.build.outputs.package_version }}' --generate-notes --prerelease
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
